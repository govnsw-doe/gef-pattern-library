---
layout: utility.pug
collection: utilities
title: Scroll Toggle
display_title: Scroll Toggle
description: A javascript utility which manages attribute and class toggling based on scroll position.
since: <span>since 1.0.0</span>
order: 2
---

:marked

  **Use this utility to fix an element's position based on the window's scroll location**

  This Utility can be used for a simple fixing of an element to the bottom of the page or a complex multi-element toggling.

  ## Examples

  * The back-to-top button on our [templates](http://dec-ce.bitbucket.org/gef-education-theme/test/template-standard.html), uses it twice per page: once to come into view, and again to stick above the footer.
  * The [A-Z template](https://govnsw-doe.github.io/gef-pattern-library/templates/a-z.html) where the a-z anchors are highlighted based on screen position.

  ## How it works

  1. Scroll Toggle is passed a position which is either a DOM element's `offset().top` ([jQuery](http://api.jquery.com/offset/)) or a specific value.
  2. When this position is passed by the scrolling element, it toggles an attribute or class on a chosen element. By default, the toggle is triggered when the checkpoint hits the bottom of the scrolling element.

  ## Configuration

  ### Options

  * **scroll_window** `{boolean} (false)` set the scrolling element to be the window.
  * **container** `{string} (selector)` selector for the container.
  * **checkpoint** `{string|number} ("[data-gef-scrolltoggle-checkpoint]")` selector for the checkpoint or a pixel value for the checkpoint from the top of the scrolling element.
  * **subject** `{string} ("[data-gef-scrolltoggle-subject]")` selector for the element which needs to change when the checkpoint is passed.
  * **passed_attr** `{string} ("data-gef-scrolltoggle-passed")` the attribute which gets added/removed when a checkpoint is passed

  If *scroll_window* is set to true, the _container_ will be only be used to find the _subject_. Otherwise the _container_ is the element is the scrolling element.

  If the _checkpoint_ selector selects more than one element, then it will select multiple subject based on the _subject_ selector. It will reference the _subject_ by the current _checkpoint_'s index.

  ```javascript
  "yourScrollToggle" : {
    "selector" : ".your-container",
    "script" : "utilities/scrollToggle",
    "config": {
      "scroll_window"   : false,
      "container"       : selector,
      "checkpoint"      : "[data-gef-scrolltoggle-checkpoint]",
      "subject"         : "[data-gef-scrolltoggle-subject]",
      "passed_attr"     : "data-gef-scrolltoggle-passed"
    }
  }
  ```

  **scroller_position** `{boolean} ("bottom")` if the `scroll_window` is true, the toggle is triggered when the checkpoint passes the bottom, middle, top or percentage of the window.

  Options: `"bottom"|"middle"|"top"|"percent"`.

  If `"percent"` is selected the *scroller_percent* needs to be defined or it will default to `"bottom"`

  ```javascript
  "yourScrollToggle" : {
    "selector" : ".your-container",
    "script" : "utilities/scrollToggle",
    "config" : {
      "scroller_position" : "top"
    }
  }
  ```

  **scroller_percent** `{int} (undefined)` the percentage value of the window where the _checkpoint_ is triggered.

  For example, if set to `25`, when the _checkpoint_ passes the top 1/4 of the screen, the _subject_ is toggled.

  Requires *scroller_position* to be set to `"percent"`.

  ```javascript
  "yourScrollToggle" : {
    "selector" : ".your-container",
    "script" : "utilities/scrollToggle",
    "config" : {
      "scroller_percent" : "top"
    }
  }
  ```

  **linked** `{boolean} (false)` set to true to make the _checkpoint_ the href value of the subject anchor tag.

  For example:

  ```
  // PUG
  a(href="#yourCheckpoint")
    | I am the subject
  ```

  ```javascript
  "yourScrollToggle" : {
    "selector" : ".your-container",
    "script" : "utilities/scrollToggle",
    "config" : {
      "linked" : true
    }
  }
  ```

  **toggle_class** `{string} (undefined)` a CSS class to toggle off and on based on whether the _checkpoint_ is passed.

  If this is set, the utility will still toggle the *passed_attr*

  ```javascript
  "yourScrollToggle" : {
    "selector" : ".your-container",
    "script" : "utilities/scrollToggle",
    "config" : {
      "toggle_class" : "active"
    }
  }
  ```

  **external** `{string} ("data-gef-scrolltoggle-subject-id")` a data-attribute for the id of an external subject

  This is used if the _subject_ is outside is *not* a child of the _container_, but the data-attribute must be on the container.

  ```
  // PUG

  div.your-container(data-gef-scrolltoggle-subject-id="yourSubject")
    div.i-am-a-child-of-your-container

  div#yourSubject.i-am-not-a-child
  ```















